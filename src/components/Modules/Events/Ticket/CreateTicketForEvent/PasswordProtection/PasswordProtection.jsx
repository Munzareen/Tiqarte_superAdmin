import {
  Button,
  TextField as MuiTextField,
  FormControlLabel,
  Typography,
  Box,
  Checkbox,
  FormControl,
  OutlinedInput,
  InputLabel,
  InputAdornment,
  IconButton,
  Grid,
  MenuItem,
} from "@mui/material"
import React, { useState } from "react"

import ContentCopyIcon from "@mui/icons-material/ContentCopy"

import { DateField, TimeField } from "@mui/x-date-pickers"
import dayjs from "dayjs"
import { InputField } from "../../../../../Common/InputField"
import { CustomSelectWithoutLabel } from "../../../../../Common/CustomSelectWithoutLabel"

export const PasswordProtection = ({
  handleNext,
  handleBack,
  setPasswordProtection,
}) => {
  const [formData, setFormData] = useState({
    password: "",
    enablePasswordProtection: true,
    autoGeneratedUrk: "",
    visibility: "",
    slug: "",
    Url: "",
  })
  console.log(formData)
  const handleInputChange = (e) => {
    const target = e.target
    const value = target.type === "checkbox" ? target.checked : target.value
    const name = target.name

    setFormData({
      ...formData,
      [name]: value,
    })
  }
  const handleContinue = () => {
    setPasswordProtection(formData)
    handleNext()
  }
  return (
    <>
      <Grid container columnSpacing={4} sx={{ mt: "32px" }}>
        <Grid item xs={6}>
          <InputField
            label={"Password"}
            type={"password"}
            name='password'
            value={formData.password}
            onChange={(e) => handleInputChange(e)}
          />
        </Grid>
        <Grid item xs={6}>
          <FormControlLabel
            sx={{
              ml: "   1rem",
              mt: "2rem",
              color: "#758895",
              "& .MuiTypography-root": {
                fontSize: "14px",
              },
            }}
            control={
              <Checkbox
                name='enablePasswordProtection'
                checked={formData.enablePasswordProtection}
                onChange={(e) => handleInputChange(e)}
              />
            }
            label='Enable password protection'
          />
        </Grid>
        <Grid xs={12} item>
          <Typography
            sx={{
              color: "#707070",
              fontWeight: 400,
              fontSize: "14px",
              mt: "32px",
            }}
          >
            Auto generated link
          </Typography>
          <FormControl
            variant='outlined'
            sx={{
              width: "100%",
              mt: "8px",
              //   height:"168px",
            }}
          >
            <InputLabel htmlFor='outlined-adornment-text'>Copy link</InputLabel>
            <OutlinedInput
              multiline
              rows={11}
              sx={{
                alignItems: { xs: "center" },
                borderRadius: "15px",
                borderColor: "#CFCFCF",
                // height: "168px",
              }}
              variant='outlined'
              id='outlined-adornment-text'
              label='Copy link'
              endAdornment={
                <InputAdornment position='end'>
                  <IconButton
                    edge='end'
                    id='copyButtonText'
                    aria-label='copy content'
                    onMouseDown={(e) => e.preventDefault()}
                    data-clipboard-target='#outlined-adornment-text'
                    sx={{ top: -115 }}
                  >
                    {<Box component='img' src='/copyIcon.png' />}
                  </IconButton>
                </InputAdornment>
              }
              name='autoGeneratedUrl'
              value={formData.autoGeneratedUrl}
              onChange={(e) => handleInputChange(e)}
            />
          </FormControl>
        </Grid>

        <Grid item xs={12} sm={6} sx={{ mt: "32px" }}>
          <CustomSelectWithoutLabel
            fieldName={"visibility"}
            sx={{ width: "100%" }}
            name={"visibility"}
            value={formData.visibility}
            handleChange={(e) => handleInputChange(e)}
          >
            <MenuItem value='yes'>
              <em>Yes</em>
            </MenuItem>
            <MenuItem value={"no"}>No</MenuItem>
          </CustomSelectWithoutLabel>
        </Grid>
        <Grid item xs={12} sm={6} sx={{ mt: "32px", justifySelf: "flex-end" }}>
          <InputField
            label={"Slug (optional)"}
            sx={{ width: "100%" }}
            type={"password"}
            name='slug'
            value={formData.slug}
            onChange={(e) => handleInputChange(e)}
          />
        </Grid>
        <Grid xs={12} item>
          <Typography
            sx={{
              color: "#707070",
              fontWeight: 400,
              fontSize: "14px",
              mt: "32px",
            }}
          >
            Auto generated link
          </Typography>
          <FormControl
            variant='outlined'
            sx={{
              width: "100%",
              mt: "8px",
              //   height:"168px",
            }}
          >
            <InputLabel htmlFor='outlined-adornment-text'>Copy link</InputLabel>
            <OutlinedInput
              multiline
              rows={1}
              sx={{
                alignItems: { xs: "center" },
                borderRadius: "15px",
                borderColor: "#CFCFCF",
                // height: "168px",
              }}
              variant='outlined'
              id='outlined-adornment-text'
              label='Copy link'
              endAdornment={
                <InputAdornment position='end'>
                  <IconButton
                    edge='end'
                    id='copyButtonText'
                    aria-label='copy content'
                    onMouseDown={(e) => e.preventDefault()}
                    data-clipboard-target='#outlined-adornment-text'
                    // sx={{ top: 0 }}
                  >
                    {<Box component='img' src='/copyIcon.png' />}
                  </IconButton>
                </InputAdornment>
              }
              name='Url'
              value={formData.Url}
              onChange={(e) => handleInputChange(e)}
            />
          </FormControl>
        </Grid>
      </Grid>

      <Box
        sx={{
          display: "flex",
          justifyContent: "flex-start",
          mt: "48px",
          mb: { xs: "30px", sm: "190px" },
        }}
      >
        <Button
          // type='submit'
          variant='contained'
          onClick={handleContinue}
          sx={{
            color: "white",
            borderColor: "#FCA311",
            width: { xs: "100%", sm: "332px" },
            height: "55px",
            fontSize: "18px",
            fontWeight: 600,
            bgcolor: "#2460B8",
            textTransform: "capitalize",
            borderRadius: "16px",
            border: "1px soliid #FCA311",
            "&.MuiButton-root:hover": {
              bgcolor: "#2460B8",
            },
          }}
        >
          Continue
        </Button>
        {/* <Button
          // type='submit'
          variant='outlined'
          onClick={handleContinue}
          sx={{
            color: "#404040",
            borderColor: "#404040",
            width: "332px",
            height: "55px",
            fontSize: "18px",
            fontWeight: 600,
            textTransform: "capitalize",
            borderRadius: "16px",
            ml: "32px",
          }}
        >
          Skip
        </Button> */}
      </Box>
    </>
  )
}
