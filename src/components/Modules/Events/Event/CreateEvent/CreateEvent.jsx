import React, { useEffect, useState } from "react"
import Cookies from "js-cookie"
import {
  Button,
  Stepper,
  Step,
  StepLabel,
  Typography,
  Box,
  Container,
} from "@mui/material"
import "../css/index.css"
import { useNavigate } from "react-router-dom"
import { useAddEventMutation } from "../../../../../store/services/Events/event.services"
import { SponsorsDetail } from "../SponsorsDetail/SponsorsDetail"
import { EventDetails } from "../EventDetails/EventDetails"
import { PasswordProtection } from "../PasswordProtection/PasswordProtection"
const steps = ["Event Details", "Sponsors", "Password Protection"]
const stepsHeader = [
  "Enter the details below ",
  "Sponsors",
  "Password protection",
]

function getStepContent(
  step,
  handleNext,
  handleBack,
  setEventDetail,
  setSponsorsDetail,
  setPasswordProtection,
  eventTypes
) {
  switch (step) {
    case 0:
      return (
        <EventDetails handleNext={handleNext} setEventDetail={setEventDetail} eventTypes={eventTypes} />
      )
    case 1:
      return (
        <SponsorsDetail
          handleNext={handleNext}
          handleBack={handleBack}
          setSponsorsDetail={setSponsorsDetail}
        />
      )
    case 2:
      return (
        <PasswordProtection
          handleNext={handleNext}
          handleBack={handleBack}
          setPasswordProtection={setPasswordProtection}
          // handleSubmit={handleSubmit}
        />
      )
    default:
      return null
  }
}

export const CreateEvent = () => {
  const navigate = useNavigate()
  const accessToken = Cookies.get("access_token")
  const [activeStep, setActiveStep] = useState(0)
  const [eventTypes, setEventTypes] = useState([]);
  const [eventDetail, setEventDetail] = useState({})
  const [sponsorsDetail, setSponsorsDetail] = useState({})
  const [passwordProtection, setPasswordProtection] = useState({})
  const [addEvent, { isLoading, isError, isSuccess, status, data }] =
    useAddEventMutation()
  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1)
  }

  const filteredData = eventDetail.eventImages
    ?.filter((item) => item.ImageURL.length > 0) // Filter out items with empty ImageURL
    .map(({ name, ...rest }) => rest)
  const handleSubmit = async (event) => {
    event.preventDefault()
    const postdata = {
      Title: eventDetail.title,
      CustomSlang: eventDetail.customSlang,
      StandingTitle: eventDetail.standingTitle,
      SeatingTitle: eventDetail.seatingTitle,
      TicketSoldOutText: eventDetail.ticketSold,
      Discription: "Fashion - Event For Fashion",
      EventTypeId: 2,
      CategoryId: 2,
      Location: "33.688781,73.033318",
      City: "Islamabad",
      EventDate: "2023-09-11T22:23:35.619Z",
      EventImages: filteredData,
      EventExternalLink: eventDetail.EventExternalLink,
      Sponsor: sponsorsDetail,
      PasswordProtection: {
        Id: 0,
        Password: passwordProtection.formData?.password,
        ScheduleDate: passwordProtection.formData?.date,
        ScheduleTime: passwordProtection.formData?.time,
        AutoGeneratedLink: passwordProtection.formData?.AutoGeneratedLink,
        EventId: 0,
      },
    }
    await addEvent(postdata)
  }

  useEffect(() => {
    if (isSuccess) navigate("/events/create-event-ticket")
  }, [isSuccess, navigate])
  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1)
  }

  const handleReset = () => {
    setActiveStep(0)
  }

  useEffect(() => {
    // Define the URL of the API
    const apiUrl = 'https://tiqarte.azurewebsites.net/api/getEventTypes';
    const token = accessToken;
    // Fetch data from the API
    fetch(apiUrl, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        setEventTypes(data);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }, []);


  return (
    <Container
      sx={{
        "&.MuiContainer-root": {
          p: 0,
          maxWidth: "1280px",
        },
      }}
    >
      <Box
        sx={{
          width: { xs: "100%", sm: "70%" },
          mx: { sm: "auto" },
          mt: "30px",
        }}
      >
        <Stepper
          activeStep={activeStep}
          alternativeLabel
          sx={{
            "& .MuiStepLabel-label": {
              mt: "8px",
              fontSize: "14px",
              fontWeight: 500,
              color: "#404040",
            },
            "& .MuiStepIcon-root.Mui-active": {
              color: " #2460B8",
            },
            "& .MuiStepIcon-root.Mui-completed": {
              color: " #2460B8",
            },
          }}
        >
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      </Box>

      {activeStep === steps.length ? (
        <>
          <Typography sx={{ mt: 2, mb: 1 }} variant='h6'>
            Thank you for submitting the form.
          </Typography>
          <Button type='submit' onClick={handleSubmit}>
            Submit
          </Button>
        </>
      ) : (
        <>
          <Typography
            sx={{
              color: "#202020",
              fontWeight: 500,
              fontSize: "22px",
              mt: "50px",
            }}
          >
            {stepsHeader[activeStep]}
          </Typography>
          <Box sx={{ mb: 2 }}>
            {getStepContent(
              activeStep,
              handleNext,
              handleBack,
              setEventDetail,
              setSponsorsDetail,
              setPasswordProtection,
              eventTypes
            )}
          </Box>
        </>
      )}
    </Container>
  )
}
